
======================================

下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。

Workspace：工作区
Index / Stage：暂存区
Repository：仓库区（或本地仓库）
Remote：远程仓库
本地分支关联远程：git branch --set-upstream-to=origin/beta beta

一、新建代码库
# 在当前目录新建一个Git代码库

$ git init

# 新建一个目录，将其初始化为Git代码库
 
$ git init [project-name]
 
# 下载一个项目和它的整个代码历史
 
$ git clone [url]

二、配置

# 显示当前的Git配置
 
$ git config --list

# 编辑Git配置文件
 
$ git config -e [--global]
 
# 设置提交代码时的用户信息
 
$ git config [--global] user.name "[name]"
 
$ git config [--global] user.email "[email address]"

三、增加/删除文件
# 添加指定文件到暂存区
 
$ git add [file1] [file2] ...
 
# 添加指定目录到暂存区，包括子目录
 
$ git add [dir]
 
# 添加当前目录的所有文件到暂存区
 
$ git add .

# 删除工作区文件，并且将这次删除放入暂存区
 
$ git rm [file1] [file2] ...
 
# 停止追踪指定文件，但该文件会保留在工作区
 
$ git rm --cached [file]

# 改名文件，并且将这个改名放入暂存区
 
$ git mv [file-original] [file-renamed]

四、代码提交

# 提交暂存区到仓库区

$ git commit -m [message]
 
# 提交暂存区的指定文件到仓库区
 
$ git commit [file1] [file2] ... -m [message]
 
# 提交工作区自上次commit之后的变化，直接到仓库区
 
$ git commit -a

# 提交时显示所有diff信息
 
$ git commit -v
 
 
 
# 使用一次新的commit，替代上一次提交
 
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
 
$ git commit --amend -m [message]
 
# 重做上一次commit，并包括指定文件的新变化
 
$ git commit --amend [file1] [file2] ...

五、分支

# 列出所有本地分支
 
$ git branch
  
# 列出所有远程分支
 
$ git branch -r
  
# 列出所有本地分支和远程分支
 
$ git branch -a

# 新建一个分支，但依然停留在当前分支
 
$ git branch [branch-name]
 
# 新建一个分支，并切换到该分支
 
$ git checkout -b [branch]
 
# 新建一个分支，指向指定commit
 
$ git branch [branch] [commit]
 
# 新建一个分支，与指定的远程分支建立追踪关系
 
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
 
$ git checkout [branch-name]
 
# 切换到上一个分支
 
$ git checkout -
 
# 建立追踪关系，在现有分支与指定的远程分支之间
 
$ git branch --set-upstream [branch] [remote-branch]
  
# 合并指定分支到当前分支
 
$ git merge [branch]

# 选择一个commit，合并进当前分支
 
$ git cherry-pick [commit]
 
# 删除分支
 
$ git branch -d [branch-name]
 
# 删除远程分支
 
$ git push origin --delete [branch-name]
 
$ git branch -dr [remote/branch]

======================================

fork的仓库如何同步主仓库
# 1. 克隆你的fork仓库（如果你还没有克隆）
git clone <your-fork-repository-url>
 
# 2. 进入仓库目录
cd <repository-name>
 
# 3. 添加主仓库作为一个新的远程仓库（如果你还没有添加）
git remote add upstream <main-repository-url>
 
# 4. 获取主仓库的最新更改
git fetch upstream
 
# 5. 切换到你想要合并的分支（通常是main或master分支）
git checkout main  # 或者 git checkout master，取决于主仓库使用的是哪个分支名
 
# 6. 合并主仓库的更改到你的分支
git merge upstream/main  # 或者 git merge upstream/master
 
# 7. 如果一切顺利，你的分支将会有主仓库的最新更改。你可以根据需要推送这些更改到你的fork。
git push origin main  # 或者 git push origin master

